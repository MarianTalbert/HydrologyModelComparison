centers=i)$withinss))
plot(1:length(wss), wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
wss
for (i in seq(from=1,to=400,by=25)) wss <- c(wss,sum(kmeans(fitDat,iter.max=50,
centers=i,nstart=10)$withinss))
wss <- (nrow(fitDat)-1)*sum(apply(fitDat,2,var))
for (i in seq(from=1,to=400,by=25)) wss <- c(wss,sum(kmeans(fitDat,iter.max=50,
centers=i,nstart=5)$withinss))
plot(1:length(wss), wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
wss
wss/seq(from=1,to=400,by=25)
wss/c(1,seq(from=1,to=400,by=25))
install.packages("fpc")
librar(fpc)
library(fpc)
?pamk
kmeans
wss <- (nrow(fitDat)-1)*sum(apply(fitDat,2,var))
for (i in seq(from=1,to=400,by=25)) wss <- c(wss,sum(kmeans(fitDat,iter.max=50,algorithm="Lloyd",
centers=i,nstart=5)$withinss))
plot(1:length(wss), wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
#with the default algorithm and 5 starts
wss/c(1,seq(from=1,to=400,by=25))
wss <- (nrow(fitDat)-1)*sum(apply(fitDat,2,var))
for (i in seq(from=1,to=400,by=25)) wss <- c(wss,sum(kmeans(fitDat,iter.max=50,algorithm="MacQueen",
centers=i,nstart=5)$withinss))
plot(1:length(wss), wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
wss/c(1,seq(from=1,to=400,by=25))
?clara
names(ClaraPart)
withinss(ClaraPart)
?runif
runif(1,0,1000000)
k$tot.withinss
k$tot.withinss/400
fitDat<-scale(fitDat)
k<-kmeans(fitDat,centers=400,iter.max=50,nstart=25)
k$tot.withinss
k$tot.withinss/400
d$ClaraClust<-rep(NA,times=nrow(d))
d$KmeansClust<-rep(NA,times=nrow(d))
d$ClaraClust[complete.cases(d[,1])]<-ClaraPart$clustering
d$KmeansClust[complete.cases(d[,1])]<-as.numeric(k$cluster)
nPart<-nrow(ClaraPart$medoids)
par(mfrow=c(3,2),mar=c(0,0,0,0),oma=c(0,0,0,0))
claraCl<- matrix(d$ClaraClust,nrow=length(lon),ncol=length(lat),byrow=FALSE)
kmeansCl<- matrix(d$KmeansClust,nrow=length(lon),ncol=length(lat),byrow=FALSE)
clsubset<-cl
sq<-seq(from=1,to=nPart,by=25)
clsubset[!cl%in%sq]<-NA
table(clsubset)
Cols<-rep(c(brewer.pal(8,"Accent"),brewer.pal(8,"Dark2"),brewer.pal(12,"Set3"),brewer.pal(12,"Paired"),brewer.pal(9,"YlOrRd"),brewer.pal(8,"Set2"),
brewer.pal(8,"Set1"),brewer.pal(11,"Spectral"),brewer.pal(8,"Blues"),brewer.pal(8,"Greens"),"magenta","slateblue1","purple","green1","red"),times=4)#,"Blues","Greens","
par(mfrow=c(2,1),oma=c(0,0,0,0),mar=c(0,0,0,0))
image(claraCl,col=sample(Cols,size=400,replace=TRUE),xaxt="n",yaxt="n")
image(kmeansCl,col=sample(Cols,size=400,replace=TRUE),xaxt="n",yaxt="n")
load("C:\\Users\\mtalbert\\Desktop\\GeographicClustering\\.RData")
d$ClaraClust<-rep(NA,times=nrow(d))
d$KmeansClust<-rep(NA,times=nrow(d))
d$ClaraClust[complete.cases(d[,1])]<-ClaraPart$clustering
d$KmeansClust[complete.cases(d[,1])]<-as.numeric(k$cluster)
nPart<-nrow(ClaraPart$medoids)
par(mfrow=c(3,2),mar=c(0,0,0,0),oma=c(0,0,0,0))
claraCl<- matrix(d$ClaraClust,nrow=length(lon),ncol=length(lat),byrow=FALSE)
kmeansCl<- matrix(d$KmeansClust,nrow=length(lon),ncol=length(lat),byrow=FALSE)
clsubset<-cl
sq<-seq(from=1,to=nPart,by=25)
clsubset[!cl%in%sq]<-NA
table(clsubset)
Cols<-rep(c(brewer.pal(8,"Accent"),brewer.pal(8,"Dark2"),brewer.pal(12,"Set3"),brewer.pal(12,"Paired"),brewer.pal(9,"YlOrRd"),brewer.pal(8,"Set2"),
brewer.pal(8,"Set1"),brewer.pal(11,"Spectral"),brewer.pal(8,"Blues"),brewer.pal(8,"Greens"),"magenta","slateblue1","purple","green1","red"),times=4)#,"Blues","Greens","
par(mfrow=c(2,1),oma=c(0,0,0,0),mar=c(0,0,0,0))
image(claraCl,col=sample(Cols,size=400,replace=TRUE),xaxt="n",yaxt="n")
image(kmeansCl,col=sample(Cols,size=400,replace=TRUE),xaxt="n",yaxt="n")
i=2
claraVar<-rep(NA,times=nrow(d))
kmeansVar<-rep(NA,times=nrow(d))
claraVar[complete.cases(d[,i])]<-ClaraPart$medoids[ClaraPart$clustering,i]
kmeansVar[complete.cases(d[,i])]<-k$center[k$cluster,i]
claraVar<-matrix(data=claraVar,nrow=nrow(RastArray),ncol=ncol(RastArray))
kmeansVar<-matrix(data=kmeansVar,nrow=nrow(RastArray),ncol=ncol(RastArray))
OrigVar<-matrix(data=d[,i],nrow=nrow(RastArray),ncol=ncol(RastArray))
par(mfrow=c(2,2))
image.plot(claraVar-OrigVar,main=names(d)[i])
image.plot(kmeansVar-OrigVar,main=names(d)[i])
image.plot(kmeansVar-scale(OrigVar),main=names(d)[i])
mean(scale(OrigVar))
mean(scale(OrigVar),na.rm=TRUE
)
i=1
claraVar<-rep(NA,times=nrow(d))
kmeansVar<-rep(NA,times=nrow(d))
claraVar[complete.cases(d[,i])]<-ClaraPart$medoids[ClaraPart$clustering,i]
kmeansVar[complete.cases(d[,i])]<-k$center[k$cluster,i]
claraVar<-matrix(data=claraVar,nrow=nrow(RastArray),ncol=ncol(RastArray))
kmeansVar<-matrix(data=kmeansVar,nrow=nrow(RastArray),ncol=ncol(RastArray))
OrigVar<-matrix(data=d[,i],nrow=nrow(RastArray),ncol=ncol(RastArray))
par(mfrow=c(2,2))
image.plot(claraVar-OrigVar,main=names(d)[i])
image.plot(kmeansVar-scale(OrigVar),main=names(d)[i])
head(k$center)
hist(k$center[,1])
dev.off()
hist(k$center[,1])
hist(k$cluster[,1])
hist(k$center[,2])
hist(k$center[,3])
hist(k$center[,4])
hist(k$center[,1])
head(fitDat)
hist(pr_Winter)
hist(fitDat$pr_Winter)
apply(fitDat,2,mean)
load("C:\\Users\\mtalbert\\Desktop\\GeographicClustering\\.RData")
fitDat<-scale(fitDat)
apply(fitDat,2,mean)
k<-kmeans(fitDat,centers=400,iter.max=50,nstart=25)
d$ClaraClust<-rep(NA,times=nrow(d))
d$KmeansClust<-rep(NA,times=nrow(d))
d$ClaraClust[complete.cases(d[,1])]<-ClaraPart$clustering
d$KmeansClust[complete.cases(d[,1])]<-as.numeric(k$cluster)
nPart<-nrow(ClaraPart$medoids)
par(mfrow=c(3,2),mar=c(0,0,0,0),oma=c(0,0,0,0))
claraCl<- matrix(d$ClaraClust,nrow=length(lon),ncol=length(lat),byrow=FALSE)
kmeansCl<- matrix(d$KmeansClust,nrow=length(lon),ncol=length(lat),byrow=FALSE)
clsubset<-cl
sq<-seq(from=1,to=nPart,by=25)
clsubset[!cl%in%sq]<-NA
table(clsubset)
Cols<-rep(c(brewer.pal(8,"Accent"),brewer.pal(8,"Dark2"),brewer.pal(12,"Set3"),brewer.pal(12,"Paired"),brewer.pal(9,"YlOrRd"),brewer.pal(8,"Set2"),
brewer.pal(8,"Set1"),brewer.pal(11,"Spectral"),brewer.pal(8,"Blues"),brewer.pal(8,"Greens"),"magenta","slateblue1","purple","green1","red"),times=4)#,"Blues","Greens","
par(mfrow=c(2,1),oma=c(0,0,0,0),mar=c(0,0,0,0))
image(claraCl,col=sample(Cols,size=400,replace=TRUE),xaxt="n",yaxt="n")
image(kmeansCl,col=sample(Cols,size=400,replace=TRUE),xaxt="n",yaxt="n")
hist(claraVar-OrigVar,breaks=200,main="Histogram of Clara Difference")
hist(kmeansVar-OrigVar,breaks=200,main="Histogram of kmeans Difference")
i=1
claraVar<-rep(NA,times=nrow(d))
kmeansVar<-rep(NA,times=nrow(d))
claraVar[complete.cases(d[,i])]<-ClaraPart$medoids[ClaraPart$clustering,i]
kmeansVar[complete.cases(d[,i])]<-k$center[k$cluster,i]
claraVar<-matrix(data=claraVar,nrow=nrow(RastArray),ncol=ncol(RastArray))
kmeansVar<-matrix(data=kmeansVar,nrow=nrow(RastArray),ncol=ncol(RastArray))
OrigVar<-matrix(data=d[,i],nrow=nrow(RastArray),ncol=ncol(RastArray))
par(mfrow=c(2,2))
image.plot(claraVar-OrigVar,main=names(d)[i])
image.plot(kmeansVar-scale(OrigVar),main=names(d)[i])
head(d)
i
quantile((kmeansVar-scale(OrigVar)),na.rm=TRUE,probs=c(.05,.25,.5,.75,.95))
d
str(d)
?scale
fitDat<-scale(fitDat)
d[,c(1:4)]<-scale(d)
head(d)
k<-kmeans(fitDat,centers=400,iter.max=50,nstart=25)
d$ClaraClust<-rep(NA,times=nrow(d))
d$KmeansClust<-rep(NA,times=nrow(d))
d$ClaraClust[complete.cases(d[,1])]<-ClaraPart$clustering
d$KmeansClust[complete.cases(d[,1])]<-as.numeric(k$cluster)
nPart<-nrow(ClaraPart$medoids)
par(mfrow=c(3,2),mar=c(0,0,0,0),oma=c(0,0,0,0))
claraCl<- matrix(d$ClaraClust,nrow=length(lon),ncol=length(lat),byrow=FALSE)
kmeansCl<- matrix(d$KmeansClust,nrow=length(lon),ncol=length(lat),byrow=FALSE)
clsubset<-cl
sq<-seq(from=1,to=nPart,by=25)
clsubset[!cl%in%sq]<-NA
table(clsubset)
Cols<-rep(c(brewer.pal(8,"Accent"),brewer.pal(8,"Dark2"),brewer.pal(12,"Set3"),brewer.pal(12,"Paired"),brewer.pal(9,"YlOrRd"),brewer.pal(8,"Set2"),
brewer.pal(8,"Set1"),brewer.pal(11,"Spectral"),brewer.pal(8,"Blues"),brewer.pal(8,"Greens"),"magenta","slateblue1","purple","green1","red"),times=4)#,"Blues","Greens","
par(mfrow=c(2,1),oma=c(0,0,0,0),mar=c(0,0,0,0))
image(claraCl,col=sample(Cols,size=400,replace=TRUE),xaxt="n",yaxt="n")
image(kmeansCl,col=sample(Cols,size=400,replace=TRUE),xaxt="n",yaxt="n")
i=1
claraVar<-rep(NA,times=nrow(d))
kmeansVar<-rep(NA,times=nrow(d))
claraVar[complete.cases(d[,i])]<-ClaraPart$medoids[ClaraPart$clustering,i]
kmeansVar[complete.cases(d[,i])]<-k$center[k$cluster,i]
claraVar<-matrix(data=claraVar,nrow=nrow(RastArray),ncol=ncol(RastArray))
kmeansVar<-matrix(data=kmeansVar,nrow=nrow(RastArray),ncol=ncol(RastArray))
OrigVar<-matrix(data=d[,i],nrow=nrow(RastArray),ncol=ncol(RastArray))
par(mfrow=c(2,2))
image.plot(claraVar-OrigVar,main=names(d)[i])
image.plot(kmeansVar-scale(OrigVar),main=names(d)[i])
hist(d[,1])
mean(d[,1])
mean(d[,1],na.rm=TRUE)
install.packages("ElemStatLearn")
library(ElemStatLearn)
?rnorm
set.seed(123)
redx1mean<-rnorm(10)
redx2mean<-rnorm(10)
greenx1mean<-rnorm(10)
greenx2mean<-rnomr(10)
greenx2mean<-rnorm(10)
?sample
sample(1:10,size=100)
sample(1:10,size=100,replace=TRUE)
redSamp<-sample(1:10,size=100,replace=TRUE)
rnorm(redx1mean[redSamp],sd=1/5)
redSamp<-sample(1:10,size=100,replace=TRUE)
redx1<-rnorm(redx1mean[redSamp],sd=1/5)
redx2<-rnorm(redx2mean[redSamp],sd=1/5)
plot(redx1,redx2,col="red")
greenSamp<-sample(1:10,size=100,replace=TRUE)
greenx1<-rnorm(greenx1mean[greenSamp],sd=1/5)
greenx2<-rnorm(greenx2mean[greenSamp],sd=1/5)
points(greenx1,greenx2,col="green")
?rnorm
set.seed(123)
redx1mean<-rnorm(10)
redx2mean<-rnorm(10)
greenx1mean<-rnorm(10,mean=1)
greenx2mean<-rnorm(10,mean=1)
redSamp<-sample(1:10,size=100,replace=TRUE)
redx1<-rnorm(redx1mean[redSamp],sd=1/5)
redx2<-rnorm(redx2mean[redSamp],sd=1/5)
greenSamp<-sample(1:10,size=100,replace=TRUE)
greenx1<-rnorm(greenx1mean[greenSamp],sd=1/5)
greenx2<-rnorm(greenx2mean[greenSamp],sd=1/5)
plot(x=redx1,y=redx2,col="red",xlim=range(c(redx1,greenx1)),ylim=range(redx2,greenx2))
points(x=greenx1,y=greenx2,col="green")
?rnorm
set.seed(123)
redx1mean<-rnorm(10,mean=0)
redx2mean<-rnorm(10,mean=0)
greenx1mean<-rnorm(10,mean=1)
greenx2mean<-rnorm(10,mean=1)
redSamp<-sample(1:10,size=100,replace=TRUE)
redx1<-rnorm(redx1mean[redSamp],sd=1/5)
redx2<-rnorm(redx2mean[redSamp],sd=1/5)
greenSamp<-sample(1:10,size=100,replace=TRUE)
greenx1<-rnorm(greenx1mean[greenSamp],sd=1/5)
greenx2<-rnorm(greenx2mean[greenSamp],sd=1/5)
mean(greenx1)
meangreenx1mean
greenx1mean
greenx1mean[greenSamp]
mean(greenx1mean[greenSamp])
mean(redx1mean[redSamp])
library(ElemStatLearn)
set.seed(124)
redx1mean<-rnorm(10,mean=0)
redx2mean<-rnorm(10,mean=0)
greenx1mean<-rnorm(10,mean=1)
greenx2mean<-rnorm(10,mean=1)
redSamp<-sample(1:10,size=100,replace=TRUE)
mean(greanx1mean)
mean(greenx1mean)
?rnorm
redSamp<-sample(1:10,size=100,replace=TRUE)
redx1<-rnorm(length(redSamp),redx1mean[redSamp],sd=1/5)
redx2<-rnorm(length(redSamp),redx2mean[redSamp],sd=1/5)
greenSamp<-sample(1:10,size=100,replace=TRUE)
greenx1<-rnorm(length(greenSamp),greenx1mean[greenSamp],sd=1/5)
greenx2<-rnorm(length(greenSamp),greenx2mean[greenSamp],sd=1/5)
plot(x=redx1,y=redx2,col="red",xlim=range(c(redx1,greenx1)),ylim=range(redx2,greenx2))
points(x=greenx1,y=greenx2,col="green")
?lm
Ch2dat<-data.frame(y=c(rep(1,times=100),rep(0,times=100)),
x1=cbind(redx1,greenx1),
x2=cbind(redx2,greenx2))
head(Ch2dat)
Ch2dat<-data.frame(y=c(rep(1,times=100),rep(0,times=100)),
x1=c(redx1,greenx1),
x2=c(redx2,greenx2))
head(Ch2dat)
lm(y~x1+x2,data=Ch2dat)
predict(lmFit)
lmFit <- lm(y~x1+x2,data=Ch2dat)
predict(lmFit)
lmFit
coef(lmFit)
?curve
plot(x=Ch2dat$x1,y=Ch2dat$x2,col=c("red","green")[factor(Ch2dat$y)])
lmFit <- lm(y~x1+x2,data=Ch2dat)
Coefs<-coef(lmFit)
plot(x=Ch2dat$x1,y=Ch2dat$x2,col=c("red","green")[factor(Ch2dat$y)])
curve(.5~Coefs[1]*x,Coefs[2]*y)
?abline
plot(x=Ch2dat$x1,y=Ch2dat$x2,col=c("red","green")[factor(Ch2dat$y)])
abline((Coefs[1]-.5)/Coefs[3],Coefs[2]/Coefs[3])
knn(Ch2dat[,c(2,3)],cl=Ch2dat$y,k=1)
library(class)
knn(Ch2dat[,c(2,3)],cl=Ch2dat$y,k=1)
?knn
knn(Ch2dat[,c(2,3)],cl=Ch2dat$y,k=1)
?knn
knn(train=Ch2dat[,c(2,3)],test=Ch2dat[,c(2,3)],cl=Ch2dat$y,k=1)
knn(train=Ch2dat[,c(2,3)],test=Ch2dat[,c(2,3)],cl=Ch2dat$y,k=5)
apply(Ch2dat,2,range)
rangeGrid<-outer(seq(from=-2,to=4,by=.1),sep(from=-2,to=4,by=.1))
rangeGrid<-outer(seq(from=-2,to=4,by=.1),seq(from=-2,to=4,by=.1))
head(rangeGrid)
length(rangeGrid)
dim(rangeGrid)
rangeGrid<-grid.expand(seq(from=-2,to=4,by=.1),seq(from=-2,to=4,by=.1))
rangeGrid<-expand.grid(seq(from=-2,to=4,by=.1),seq(from=-2,to=4,by=.1))
rangeGrid<-expand.grid(seq(from=-2,to=4,by=.1),seq(from=-2,to=4,by=.1))
gridCol<-knn(train=Ch2dat[,c(2,3)],test=rangeGrid,cl=Ch2dat$y,k=5)
plot(x=Ch2dat$x1,y=Ch2dat$x2,col=c("red","green")[factor(Ch2dat$y)])
points(rangeGrid[,1],rangeGrid[,2],col=c("red","green")[factor(gridCol)])
plot(x=Ch2dat$x1,y=Ch2dat$x2,col=c("red","green")[factor(Ch2dat$y)])
points(rangeGrid[,1],rangeGrid[,2],col=c("red","green")[factor(gridCol)],cex=.1,pch=16)
plot(x=Ch2dat$x1,y=Ch2dat$x2,col=c("red","green")[factor(Ch2dat$y)],pch=16)
points(rangeGrid[,1],rangeGrid[,2],col=c("red","green")[factor(gridCol)],cex=.05,pch=16)
plot(x=Ch2dat$x1,y=Ch2dat$x2,col=c("red","green")[factor(Ch2dat$y)],pch=21)
plot(x=Ch2dat$x1,y=Ch2dat$x2,bg=c("red","green")[factor(Ch2dat$y)],pch=21)
points(rangeGrid[,1],rangeGrid[,2],col=c("red","green")[factor(gridCol)],cex=.3,pch=16)
plot(rangeGrid[,1],rangeGrid[,2],col=c("red","green")[factor(gridCol)],cex=.6,pch=16)
points(x=Ch2dat$x1,y=Ch2dat$x2,bg=c("red","green")[factor(Ch2dat$y)],pch=21)
rangeGrid<-expand.grid(seq(from=-2,to=3,by=.1),seq(from=-2,to=3,by=.1))
gridCol<-knn(train=Ch2dat[,c(2,3)],test=rangeGrid,cl=Ch2dat$y,k=1)
plot(rangeGrid[,1],rangeGrid[,2],col=c("red","green")[factor(gridCol)],cex=.6,pch=16)
points(x=Ch2dat$x1,y=Ch2dat$x2,bg=c("red","green")[factor(Ch2dat$y)],pch=21,cex=1.5)
gridCol<-knn(train=Ch2dat[,c(2,3)],test=rangeGrid,cl=Ch2dat$y,k=15)
plot(rangeGrid[,1],rangeGrid[,2],col=c("red","green")[factor(gridCol)],cex=.6,pch=16)
points(x=Ch2dat$x1,y=Ch2dat$x2,bg=c("red","green")[factor(Ch2dat$y)],pch=21,cex=1.5)
?contour
Ch2test <- data.frame(y=c(rep(1,times=5000),rep(0,times=1000)),
x1=c(redx1,greenx1),
10/14
install.packages("HSAUR")
library("HSAUR")
data("weightgain")
weightgain
lm(weightgain~source*type,data=weightgain)
fit<-lm(weightgain~source*type,data=weightgain)
summary(fit)
fit<-lm(weightgain~source*type-1,data=weightgain)
summary(fit)
plot.design(weightgain)
?interaction.plot
head(weightgain)
with(weightgain,{interaction.plot(source,type,weightgain)})
tapply(weightgain$weightgain,
list(weightgain$source, weightgain$type), mean)
fit<-lm(weightgain~source*type,data=weightgain)
summary(fit)
tapply(weightgain$weightgain,
list(weightgain$source, weightgain$type), mean)
fit<-lm(weightgain~source*type-1,data=weightgain)
summary(fit)
head(weightgain)
?weightgain
anova(fit)
fit<-lm(weightgain~source*type,data=weightgain)
fit1<-lm(weightgain~source*type-1,data=weightgain)
anova(fit)
anova(fit1)
?foster
summary(aov(weight~litgen*motgen,data=foster))
summary(lm(weight~litgen*motgen,data=foster))
aov(weight~litgen*motgen,data=foster)
fit<-aov(weight~litgen*motgen,data=foster)
str(fit)
fit$coefficients
summary(lm(weight~litgen*motgen,data=foster))
fit<-lm(weight~litgen*motgen,data=foster)
fit
fit<-lm(weight~factor(litgen)*factor(motgen),data=foster)
fit
interaction.plot(weightgain$type,weightgain$souce,weightgain$weightgain)
interaction.plot(weightgain$type,weightgain$source,weightgain$weightgain)
foster_hsd<-TukeyHSD(fit,"motgen")
fit<-aov(weight~litgen*motgen,data=foster)
foster_hsd<-TukeyHSD(fit,"motgen")
foster_hsd
fit<-aov(weight~litgen*motgen,data=foster)
summary(fit)
ANOVA(fit,type=3)
library(car)
Anova(fit,type=3)
fit
Anova(fit,type=1)
Anova(fit,type=2)
aov(weight~litgen*motgen,data=foster)
fit<-aov(weight~litgen*motgen,data=foster)
fit$coefficients
summary(fit)
anova(lm(weight~litgen*motgen,data=foster)
)
hayes.df
Hays.df
pkg = c("sp", "xts", "zoo", "spacetime", "trajectories",
"maptools", "maps", "mapview", "leaflet", "rglwidget",
"rgl", "RColorBrewer", "ggmap", "ggplot2", "dplyr",
"rmarkdown", "units")
install.packages(pkg)
install.packages(pkg)
getwd()
pkg = c("sp", "xts", "zoo", "spacetime", "trajectories",
"maptools", "maps", "mapview", "leaflet", "rglwidget",
"rgl", "RColorBrewer", "ggmap", "ggplot2", "dplyr",
"rmarkdown", "units")
library(pkg)
library("sp","xts")
install.packages("sp")
library("sp")
library(raster)
librar(rgdal)
library(rgdal)
library(shiny)
install.packages("sp")
library(shiny)
library(leaflet)
library(raster)
library(rCharts)
options(RCHART_LIB = 'polycharts')
options(RCHART_WIDTH = 800,RCHART_HEIGHT = 300)
setwd("C:\\Users\\mtalbert\\Desktop\\HydrologyProblem\\HydroCode")
load("C:\\Users\\mtalbert\\Desktop\\HydrologyProblem\\graphics\\ShinyDatNewStacks.RData")
latitude<-as.numeric(MonthlyByStation$Lat[MonthlyByStation$Month==1])
longitude<-as.numeric(MonthlyByStation$Lon[MonthlyByStation$Month==1])
ids<-MonthlyByStation$SiteName[MonthlyByStation$Month==1]
runApp("HydroMapApp")
library(shiny)
library(leaflet)
library(raster)
library(rCharts)
options(RCHART_LIB = 'polycharts')
options(RCHART_WIDTH = 800,RCHART_HEIGHT = 300)
setwd("C:\\Users\\mtalbert\\Desktop\\HydrologyProblem\\HydroCode")
load("C:\\Users\\mtalbert\\Desktop\\HydrologyProblem\\graphics\\ShinyDatNewStacks.RData")
latitude<-as.numeric(MonthlyByStation$Lat[MonthlyByStation$Month==1])
longitude<-as.numeric(MonthlyByStation$Lon[MonthlyByStation$Month==1])
ids<-MonthlyByStation$SiteName[MonthlyByStation$Month==1]
runApp("HydroMapApp")
shiny::runApp('HydroMapApp')
install.packages("rCharts")
install.packages("rCharts")
library(devtools)
install_github("rCharts")
install_github("rCharts",username="a")
library("rcharts")
library("rCharts")
runApp("HydroMapApp")
library(shiny)
library(leaflet)
library(raster)
library(rCharts)
options(RCHART_LIB = 'polycharts')
options(RCHART_WIDTH = 800,RCHART_HEIGHT = 300)
setwd("C:\\Users\\mtalbert\\Desktop\\HydrologyProblem\\HydroCode")
load("C:\\Users\\mtalbert\\Desktop\\HydrologyProblem\\graphics\\ShinyDatNewStacks.RData")
latitude<-as.numeric(MonthlyByStation$Lat[MonthlyByStation$Month==1])
longitude<-as.numeric(MonthlyByStation$Lon[MonthlyByStation$Month==1])
ids<-MonthlyByStation$SiteName[MonthlyByStation$Month==1]
runApp("HydroMapApp")
library(shiny)
library(leaflet)
library(raster)
library(rCharts)
options(RCHART_LIB = 'polycharts')
options(RCHART_WIDTH = 800,RCHART_HEIGHT = 300)
setwd("C:\\Users\\mtalbert\\Desktop\\HydrologyProblem\\HydroCode")
load("C:\\Users\\mtalbert\\Desktop\\HydrologyProblem\\graphics\\ShinyDatNewNewStacks.RData")
latitude<-as.numeric(MonthlyByStation$Lat[MonthlyByStation$Month==1])
longitude<-as.numeric(MonthlyByStation$Lon[MonthlyByStation$Month==1])
ids<-MonthlyByStation$SiteName[MonthlyByStation$Month==1]
runApp("HydroMapApp")
MyMap<-leaflet() %>% addTiles()%>%setView(-100,42,zoom=4) %>%
addProviderTiles("CartoDB.Positron") %>%
addLegend(pal = palblue,values=c(exp(0),exp(1.2)),
title="VIC 4.0.7/VIC 4.1.2") %>%
addLegend(pal = palred, values = c(exp(0),exp(1.2)),
title="VIC 4.1.2/VIC 4.0.7")%>%
addRasterImage(ShinyMapLst[[1]][[1]][[1]],
colors = pal,
opacity = .8)
MyMap<-leaflet() %>% addTiles()%>%setView(-100,42,zoom=4) %>%
addProviderTiles("CartoDB.Positron") %>%
addLegend(pal = palblue,values=c(exp(0),exp(1.2)),
title="VIC 4.0.7/VIC 4.1.2") %>%
addLegend(pal = palred, values = c(exp(0),exp(1.2)),
title="VIC 4.1.2/VIC 4.0.7")%>%
addRasterImage(ShinyMapLst[[1]][[1]][[1]],
colors = pal,
opacity = .8)
runApp("HydroMapApp")
?addCircles
shiny::runApp('HydroMapApp')
shiny::runApp('HydroMapApp')
library(shiny)
library(leaflet)
library(raster)
library(rCharts)
options(RCHART_LIB = 'polycharts')
options(RCHART_WIDTH = 800,RCHART_HEIGHT = 300)
setwd("C:\\Users\\mtalbert\\Desktop\\HydrologyProblem\\HydroCode")
load("C:\\Users\\mtalbert\\Desktop\\HydrologyProblem\\graphics\\ShinyDatNewStacks.RData")
latitude<-as.numeric(MonthlyByStation$Lat[MonthlyByStation$Month==1])
longitude<-as.numeric(MonthlyByStation$Lon[MonthlyByStation$Month==1])
ids<-MonthlyByStation$SiteName[MonthlyByStation$Month==1]
library(shiny)
library(leaflet)
library(raster)
library(rCharts)
options(RCHART_LIB = 'polycharts')
options(RCHART_WIDTH = 800,RCHART_HEIGHT = 300)
setwd("C:\\Users\\mtalbert\\Desktop\\HydrologyProblem\\HydroCode")
load("C:\\Users\\mtalbert\\Desktop\\HydrologyProblem\\graphics\\ShinyDatNewStacks.RData")
latitude<-as.numeric(MonthlyByStation$Lat[MonthlyByStation$Month==1])
longitude<-as.numeric(MonthlyByStation$Lon[MonthlyByStation$Month==1])
ids<-MonthlyByStation$SiteName[MonthlyByStation$Month==1]
runApp("HydroMapApp")
